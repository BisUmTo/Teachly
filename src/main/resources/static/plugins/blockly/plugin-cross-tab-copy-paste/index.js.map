{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@blockly/plugin-cross-tab-copy-paste/webpack/universalModuleDefinition","webpack://@blockly/plugin-cross-tab-copy-paste/external umd {\"root\":\"Blockly\",\"commonjs\":\"blockly/core\",\"commonjs2\":\"blockly/core\",\"amd\":\"blockly/core\"}","webpack://@blockly/plugin-cross-tab-copy-paste/webpack/bootstrap","webpack://@blockly/plugin-cross-tab-copy-paste/webpack/runtime/compat get default export","webpack://@blockly/plugin-cross-tab-copy-paste/webpack/runtime/define property getters","webpack://@blockly/plugin-cross-tab-copy-paste/webpack/runtime/hasOwnProperty shorthand","webpack://@blockly/plugin-cross-tab-copy-paste/webpack/runtime/make namespace object","webpack://@blockly/plugin-cross-tab-copy-paste/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"blockly/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"blockly/core\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"blockly/core\")) : factory(root[\"Blockly\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, (__WEBPACK_EXTERNAL_MODULE__370__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__370__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as Blockly from 'blockly/core';\n\n/**\n * A Blockly plugin that adds context menu items and keyboard shortcuts\n * to allow users to copy and paste a block between tabs.\n */\nexport class CrossTabCopyPaste {\n  /**\n   * Initializes the cross tab copy paste plugin. If no options are selected\n   * then both context menu items and keyboard shortcuts are added.\n   * @param {{contextMenu: boolean, shortcut: boolean}} options\n   * `contextMenu` Register copy and paste in the context menu.\n   * `shortcut` Register cut (ctr + x), copy (ctr + c) and paste (ctr + v)\n   * in the shortcut.\n   * @param {Function=} typeErrorCallback\n   * callback function to handle type errors\n   */\n  init(\n    {contextMenu = true, shortcut = true} = {\n      contextMenu: true,\n      shortcut: true,\n    },\n    typeErrorCallback,\n  ) {\n    if (contextMenu) {\n      // Register the menus\n      this.blockCopyToStorageContextMenu();\n      this.blockPasteFromStorageContextMenu(typeErrorCallback);\n    }\n\n    if (shortcut) {\n      // Unregister the default KeyboardShortcuts\n      Blockly.ShortcutRegistry.registry.unregister(\n        Blockly.ShortcutItems.names.COPY,\n      );\n      Blockly.ShortcutRegistry.registry.unregister(\n        Blockly.ShortcutItems.names.CUT,\n      );\n      Blockly.ShortcutRegistry.registry.unregister(\n        Blockly.ShortcutItems.names.PASTE,\n      );\n      // Register the KeyboardShortcuts\n      this.blockCopyToStorageShortcut();\n      this.blockCutToStorageShortcut();\n      this.blockPasteFromStorageShortcut(typeErrorCallback);\n    }\n  }\n\n  /**\n   * Adds a copy command to the block context menu.\n   */\n  blockCopyToStorageContextMenu() {\n    /** @type {!Blockly.ContextMenuRegistry.RegistryItem} */\n    const copyToStorageOption = {\n      displayText: function () {\n        if (Blockly.Msg['CROSS_TAB_COPY']) {\n          return Blockly.Msg['CROSS_TAB_COPY'];\n        }\n        return 'Copy';\n      },\n      preconditionFn: function (\n        /** @type {!Blockly.ContextMenuRegistry.Scope} */ scope,\n      ) {\n        if (\n          Blockly.getSelected().isDeletable() &&\n          Blockly.getSelected().isMovable()\n        ) {\n          return 'enabled';\n        }\n        return 'disabled';\n      },\n      callback: function (\n        /** @type {!Blockly.ContextMenuRegistry.Scope} */ scope,\n      ) {\n        localStorage.setItem(\n          'blocklyStash',\n          JSON.stringify(scope.block.toCopyData()),\n        );\n      },\n      scopeType: Blockly.ContextMenuRegistry.ScopeType.BLOCK,\n      id: 'blockCopyToStorage',\n      weight: 0,\n    };\n    Blockly.ContextMenuRegistry.registry.register(copyToStorageOption);\n  }\n\n  /**\n   * Adds a paste command to the block context menu.\n   * @param {Function=} typeErrorCallback\n   * callback function to handle type errors\n   */\n  blockPasteFromStorageContextMenu(typeErrorCallback) {\n    /** @type {!Blockly.ContextMenuRegistry.RegistryItem} */\n    const pasteFromStorageOption = {\n      displayText: function () {\n        if (Blockly.Msg['CROSS_TAB_PASTE']) {\n          return Blockly.Msg['CROSS_TAB_PASTE'];\n        }\n        return 'Paste';\n      },\n      preconditionFn: function (\n        /** @type {!Blockly.ContextMenuRegistry.Scope} */ scope,\n      ) {\n        const copyData = JSON.parse(localStorage.getItem('blocklyStash'));\n        if (\n          copyData &&\n          scope.workspace.isCapacityAvailable(copyData.typeCounts)\n        ) {\n          return 'enabled';\n        }\n        return 'disabled';\n      },\n      callback: function (\n        /** @type {!Blockly.ContextMenuRegistry.Scope} */ scope,\n      ) {\n        const copyData = JSON.parse(localStorage.getItem('blocklyStash'));\n        try {\n          Blockly.clipboard.paste(copyData, scope.workspace);\n        } catch (e) {\n          if (e instanceof TypeError && typeErrorCallback) {\n            typeErrorCallback();\n          } else {\n            throw e;\n          }\n        }\n      },\n      scopeType: Blockly.ContextMenuRegistry.ScopeType.WORKSPACE,\n      id: 'blockPasteFromStorage',\n      weight: 0,\n    };\n    Blockly.ContextMenuRegistry.registry.register(pasteFromStorageOption);\n  }\n\n  /**\n   * Adds a keyboard shortcut that will store copy information for a block\n   * in localStorage.\n   */\n  blockCopyToStorageShortcut() {\n    /** @type {!Blockly.ShortcutRegistry.KeyboardShortcut} */\n    const copyShortcut = {\n      name: 'copy',\n      preconditionFn: function (workspace) {\n        return (\n          !workspace.options.readOnly &&\n          !Blockly.Gesture.inProgress() &&\n          Blockly.getSelected() &&\n          Blockly.getSelected().isDeletable() &&\n          Blockly.getSelected().isMovable() &&\n          !Blockly.getSelected().isInMutator\n        );\n      },\n      callback: function (workspace, e) {\n        // Prevent the default copy behavior,\n        // which may beep or otherwise indicate\n        // an error due to the lack of a selection.\n        e.preventDefault();\n        const block = Blockly.getSelected();\n        if (!block || !Blockly.isCopyable(block)) return false;\n        workspace.hideChaff();\n        localStorage.setItem(\n          'blocklyStash',\n          JSON.stringify(block.toCopyData()),\n        );\n        return true;\n      },\n    };\n    Blockly.ShortcutRegistry.registry.register(copyShortcut);\n\n    const ctrlC = Blockly.ShortcutRegistry.registry.createSerializedKey(\n      Blockly.utils.KeyCodes.C,\n      [Blockly.utils.KeyCodes.CTRL],\n    );\n    Blockly.ShortcutRegistry.registry.addKeyMapping(ctrlC, copyShortcut.name);\n\n    const altC = Blockly.ShortcutRegistry.registry.createSerializedKey(\n      Blockly.utils.KeyCodes.C,\n      [Blockly.utils.KeyCodes.ALT],\n    );\n    Blockly.ShortcutRegistry.registry.addKeyMapping(altC, copyShortcut.name);\n\n    const metaC = Blockly.ShortcutRegistry.registry.createSerializedKey(\n      Blockly.utils.KeyCodes.C,\n      [Blockly.utils.KeyCodes.META],\n    );\n    Blockly.ShortcutRegistry.registry.addKeyMapping(metaC, copyShortcut.name);\n  }\n\n  /**\n   * Adds a keyboard shortcut that will store copy information for a block\n   * in local storage and delete the block.\n   */\n  blockCutToStorageShortcut() {\n    /** @type {!Blockly.ShortcutRegistry.KeyboardShortcut} */\n    const cutShortcut = {\n      name: 'cut',\n      preconditionFn: function (workspace) {\n        return (\n          !workspace.options.readOnly &&\n          !Blockly.Gesture.inProgress() &&\n          Blockly.getSelected() &&\n          Blockly.getSelected().isDeletable() &&\n          Blockly.getSelected().isMovable() &&\n          !Blockly.getSelected().workspace.isFlyout\n        );\n      },\n      callback: function (workspace, e) {\n        // Prevent the default copy behavior,\n        // which may beep or otherwise indicate\n        // an error due to the lack of a selection.\n        e.preventDefault();\n        const block = /** @type {Blockly.BlockSvg} */ (Blockly.getSelected());\n        if (!block || !Blockly.isCopyable(block)) return false;\n        localStorage.setItem(\n          'blocklyStash',\n          JSON.stringify(block.toCopyData()),\n        );\n        Blockly.Events.setGroup(true);\n        block.dispose(true);\n        Blockly.Events.setGroup(false);\n        return true;\n      },\n    };\n    Blockly.ShortcutRegistry.registry.register(cutShortcut);\n\n    const ctrlX = Blockly.ShortcutRegistry.registry.createSerializedKey(\n      Blockly.utils.KeyCodes.X,\n      [Blockly.utils.KeyCodes.CTRL],\n    );\n    Blockly.ShortcutRegistry.registry.addKeyMapping(ctrlX, cutShortcut.name);\n\n    const altX = Blockly.ShortcutRegistry.registry.createSerializedKey(\n      Blockly.utils.KeyCodes.X,\n      [Blockly.utils.KeyCodes.ALT],\n    );\n    Blockly.ShortcutRegistry.registry.addKeyMapping(altX, cutShortcut.name);\n\n    const metaX = Blockly.ShortcutRegistry.registry.createSerializedKey(\n      Blockly.utils.KeyCodes.X,\n      [Blockly.utils.KeyCodes.META],\n    );\n    Blockly.ShortcutRegistry.registry.addKeyMapping(metaX, cutShortcut.name);\n  }\n\n  /**\n   * Adds a keyboard shortcut that will paste the block stored in localStorage.\n   * @param {Function=} typeErrorCallback\n   * callback function to handle type errors\n   */\n  blockPasteFromStorageShortcut(typeErrorCallback) {\n    /** @type {!Blockly.ShortcutRegistry.KeyboardShortcut} */\n    const pasteShortcut = {\n      name: 'paste',\n      preconditionFn: function (workspace) {\n        if (workspace.options.readOnly || Blockly.Gesture.inProgress()) {\n          return false;\n        }\n        const copyData = JSON.parse(localStorage.getItem('blocklyStash'));\n        if (!copyData || !workspace.isCapacityAvailable(copyData.typeCounts)) {\n          return false;\n        }\n        return true;\n      },\n      callback: function (workspace, e) {\n        // Prevent the default copy behavior,\n        // which may beep or otherwise indicate\n        // an error due to the lack of a selection.\n        e.preventDefault();\n        const copyData = JSON.parse(localStorage.getItem('blocklyStash'));\n        try {\n          Blockly.clipboard.paste(copyData, workspace);\n        } catch (e) {\n          if (e instanceof TypeError && typeErrorCallback) {\n            typeErrorCallback();\n          } else {\n            throw e;\n          }\n        }\n        return true;\n      },\n    };\n    Blockly.ShortcutRegistry.registry.register(pasteShortcut);\n\n    const ctrlV = Blockly.ShortcutRegistry.registry.createSerializedKey(\n      Blockly.utils.KeyCodes.V,\n      [Blockly.utils.KeyCodes.CTRL],\n    );\n    Blockly.ShortcutRegistry.registry.addKeyMapping(ctrlV, pasteShortcut.name);\n\n    const altV = Blockly.ShortcutRegistry.registry.createSerializedKey(\n      Blockly.utils.KeyCodes.V,\n      [Blockly.utils.KeyCodes.ALT],\n    );\n    Blockly.ShortcutRegistry.registry.addKeyMapping(altV, pasteShortcut.name);\n\n    const metaV = Blockly.ShortcutRegistry.registry.createSerializedKey(\n      Blockly.utils.KeyCodes.V,\n      [Blockly.utils.KeyCodes.META],\n    );\n    Blockly.ShortcutRegistry.registry.addKeyMapping(metaV, pasteShortcut.name);\n  }\n}\n"],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE__370__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","CrossTabCopyPaste","init","contextMenu","shortcut","typeErrorCallback","blockCopyToStorageContextMenu","blockPasteFromStorageContextMenu","registry","unregister","names","COPY","CUT","PASTE","blockCopyToStorageShortcut","blockCutToStorageShortcut","blockPasteFromStorageShortcut","copyToStorageOption","displayText","preconditionFn","scope","isDeletable","isMovable","callback","localStorage","setItem","JSON","stringify","block","toCopyData","scopeType","ScopeType","BLOCK","id","weight","register","pasteFromStorageOption","copyData","parse","getItem","workspace","isCapacityAvailable","typeCounts","paste","e","TypeError","WORKSPACE","copyShortcut","name","options","readOnly","inProgress","isInMutator","preventDefault","hideChaff","ctrlC","createSerializedKey","KeyCodes","C","CTRL","addKeyMapping","altC","ALT","metaC","META","cutShortcut","isFlyout","setGroup","dispose","ctrlX","X","altX","metaX","pasteShortcut","ctrlV","V","altV","metaV"],"sourceRoot":""}