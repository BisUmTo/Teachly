{"version":3,"file":"index.js","mappings":";CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,sBAC7B,GAAqB,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,gBAAiBJ,OACrB,CACJ,IAAIM,EAAuB,iBAAZL,QAAuBD,EAAQG,QAAQ,iBAAmBH,EAAQD,EAAc,SAC/F,IAAI,IAAIQ,KAAKD,GAAuB,iBAAZL,QAAuBA,QAAUF,GAAMQ,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,MAAOC,qCCTVP,EAAOD,QAAUQ,ICCbC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaZ,QAGrB,IAAIC,EAASQ,EAAyBE,GAAY,CAGjDX,QAAS,CAAC,GAOX,OAHAc,EAAoBH,GAAUV,EAAQA,EAAOD,QAASU,GAG/CT,EAAOD,OACf,CCrBAU,EAAoBK,EAAKd,IACxB,IAAIe,EAASf,GAAUA,EAAOgB,WAC7B,IAAOhB,EAAiB,QACxB,IAAM,EAEP,OADAS,EAAoBQ,EAAEF,EAAQ,CAAEX,EAAGW,IAC5BA,CAAM,ECLdN,EAAoBQ,EAAI,CAAClB,EAASmB,KACjC,IAAI,IAAIC,KAAOD,EACXT,EAAoBW,EAAEF,EAAYC,KAASV,EAAoBW,EAAErB,EAASoB,IAC5EE,OAAOC,eAAevB,EAASoB,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDV,EAAoBW,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFjB,EAAoBqB,EAAK/B,IACH,oBAAXgC,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAevB,EAASgC,OAAOC,YAAa,CAAEC,MAAO,WAE7DZ,OAAOC,eAAevB,EAAS,aAAc,CAAEkC,OAAO,GAAO,qICgBvD,MAAMC,UAAgC,oBAI3C,WAAAC,GACEC,OACF,CAMA,YAAAC,CAAajC,EAAGkC,GACd,MAAMC,EAAgBnC,EAAEoC,WAClBC,EAAgBH,EAAEE,WAExB,IAAKD,IAAkBE,EAErB,OAAOF,GAAiBE,EAI1B,IAAK,IAAIpC,EAAI,EAAGA,EAAIkC,EAAcG,OAAQrC,IACxC,IAAgD,GAA5CoC,EAAcE,QAAQJ,EAAclC,IACtC,OAAO,EAIX,OAAO,CACT,EAGK,MAAMuC,EAAmB,WAAiBC,KAAKC,mBACzCC,EAAmB,0BAGhC,WAAiBC,SACfJ,EACAG,EACAb,GAGK,MAAMe,EAAa,CACxB,CAACL,GAAmBG","sources":["webpack://@blockly/plugin-strict-connection-checker/webpack/universalModuleDefinition","webpack://@blockly/plugin-strict-connection-checker/external umd {\"root\":\"Blockly\",\"commonjs\":\"blockly/core\",\"commonjs2\":\"blockly/core\",\"amd\":\"blockly/core\"}","webpack://@blockly/plugin-strict-connection-checker/webpack/bootstrap","webpack://@blockly/plugin-strict-connection-checker/webpack/runtime/compat get default export","webpack://@blockly/plugin-strict-connection-checker/webpack/runtime/define property getters","webpack://@blockly/plugin-strict-connection-checker/webpack/runtime/hasOwnProperty shorthand","webpack://@blockly/plugin-strict-connection-checker/webpack/runtime/make namespace object","webpack://@blockly/plugin-strict-connection-checker/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"blockly/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"blockly/core\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"blockly/core\")) : factory(root[\"Blockly\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, (__WEBPACK_EXTERNAL_MODULE__370__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__370__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview A Blockly plugin that makes connection type checks strict.\n */\n\nimport * as Blockly from 'blockly/core';\n\n/**\n * A connection checker that imposes stricter typing rules than the default\n * checker in Blockly, but uses the same rules for dragging and safety.\n * This checker still expects nullable arrays of string for connection\n * type checks, and still looks for intersections in the arrays. Unlike the\n * default checker, null checks arrays are only compatible with other null\n * arrays.\n * @implements {Blockly.IConnectionChecker}\n */\nexport class StrictConnectionChecker extends Blockly.ConnectionChecker {\n  /**\n   * Constructor for the connection checker.\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Type check arrays must either intersect or both be null.\n   * @override\n   */\n  doTypeChecks(a, b) {\n    const checkArrayOne = a.getCheck();\n    const checkArrayTwo = b.getCheck();\n\n    if (!checkArrayOne || !checkArrayTwo) {\n      // Null arrays can only connect to other null arrays.\n      return checkArrayOne == checkArrayTwo;\n    }\n\n    // Find any intersection in the check lists.\n    for (let i = 0; i < checkArrayOne.length; i++) {\n      if (checkArrayTwo.indexOf(checkArrayOne[i]) != -1) {\n        return true;\n      }\n    }\n    // No intersection.\n    return false;\n  }\n}\n\nexport const registrationType = Blockly.registry.Type.CONNECTION_CHECKER;\nexport const registrationName = 'StrictConnectionChecker';\n\n// Register the checker so that it can be used by name.\nBlockly.registry.register(\n  registrationType,\n  registrationName,\n  StrictConnectionChecker,\n);\n\nexport const pluginInfo = {\n  [registrationType]: registrationName,\n};\n"],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE__370__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","StrictConnectionChecker","constructor","super","doTypeChecks","b","checkArrayOne","getCheck","checkArrayTwo","length","indexOf","registrationType","Type","CONNECTION_CHECKER","registrationName","register","pluginInfo"],"sourceRoot":""}