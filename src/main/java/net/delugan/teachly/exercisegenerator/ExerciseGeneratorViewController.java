package net.delugan.teachly.exercisegenerator;

import net.delugan.teachly.exercise.ExerciseRepository;
import net.delugan.teachly.user.UserRepository;
import net.delugan.teachly.utils.AuthenticatedModelAndView;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import java.util.UUID;

/**
 * Controller for exercise generator-related views.
 * Handles requests for viewing, creating, editing, and displaying exercise generators.
 */
@Controller
@RequestMapping("/dashboard/exercises/generators")
public class ExerciseGeneratorViewController {
    /**
     * Default Blockly code for new exercise generators.
     */
    private static final String DEFAULT_BLOCKLY_CODE = "{}" ;

    /**
     * Repository for accessing and managing exercise generators.
     */
    final ExerciseGeneratorRepository exerciseGeneratorRepository;
    
    /**
     * Repository for accessing and managing exercises.
     */
    final ExerciseRepository exerciseRepository;
    
    /**
     * Repository for accessing and managing users.
     */
    final UserRepository userRepository;

    /**
     * Constructs a new ExerciseGeneratorViewController with the required repositories.
     *
     * @param exerciseGeneratorRepository Repository for exercise generators
     * @param exerciseRepository Repository for exercises
     * @param userRepository Repository for users
     */
    public ExerciseGeneratorViewController(ExerciseGeneratorRepository exerciseGeneratorRepository, ExerciseRepository exerciseRepository, UserRepository userRepository) {
        this.exerciseGeneratorRepository = exerciseGeneratorRepository;
        this.exerciseRepository = exerciseRepository;
        this.userRepository = userRepository;
    }

    /**
     * Handles requests to view the list of exercise generators.
     *
     * @param oAuth2User The authenticated user
     * @return ModelAndView for the exercise generators list page
     */
    @GetMapping
    public ModelAndView index(@AuthenticationPrincipal OAuth2User oAuth2User) {
        AuthenticatedModelAndView modelAndView = new AuthenticatedModelAndView("dashboard/exercises/generators/list", userRepository.getByOAuth2(oAuth2User));
        modelAndView.addObject("generators", exerciseGeneratorRepository.findAll());
        return modelAndView;
    }

    /**
     * Handles requests to create a new exercise generator.
     * Optionally clones an existing generator if an ID is provided.
     *
     * @param oAuth2User The authenticated user
     * @param clone_id Optional ID of a generator to clone
     * @return ModelAndView for the generator creation page
     */
    @GetMapping("create")
    public ModelAndView create(@AuthenticationPrincipal OAuth2User oAuth2User, @RequestParam(value="id", required = false) UUID clone_id) {
        AuthenticatedModelAndView modelAndView = new AuthenticatedModelAndView("dashboard/exercises/generators/create", userRepository.getByOAuth2(oAuth2User));
        if (clone_id != null) {
            ExerciseGenerator clone = exerciseGeneratorRepository.findById(clone_id).orElseThrow();
            modelAndView.addObject("generator", clone);
            modelAndView.addObject("blocklyCode", clone.getBlocklyJsonCode());
        } else {
            modelAndView.addObject("blocklyCode", DEFAULT_BLOCKLY_CODE);
        }
        return modelAndView;
    }

    /**
     * Handles requests to edit an existing exercise generator.
     *
     * @param oAuth2User The authenticated user
     * @param id The ID of the generator to edit
     * @return ModelAndView for the generator edit page
     * @throws java.util.NoSuchElementException if no generator is found with the given ID
     */
    @GetMapping("edit/{id}")
    public ModelAndView edit(@AuthenticationPrincipal OAuth2User oAuth2User, @PathVariable UUID id) {
        AuthenticatedModelAndView modelAndView = new AuthenticatedModelAndView("dashboard/exercises/generators/edit", userRepository.getByOAuth2(oAuth2User));
        ExerciseGenerator original = exerciseGeneratorRepository.findById(id).orElseThrow();
        modelAndView.addObject("generator", original);
        modelAndView.addObject("blocklyCode", original.getBlocklyJsonCode());
        return modelAndView;
    }

    /**
     * Handles requests to view details of a specific exercise generator.
     * Also displays all exercises generated by this generator.
     *
     * @param oAuth2User The authenticated user
     * @param id The ID of the generator to view
     * @return ModelAndView for the generator details page
     * @throws java.util.NoSuchElementException if no generator is found with the given ID
     */
    @GetMapping("show/{id}")
    public ModelAndView show(@AuthenticationPrincipal OAuth2User oAuth2User, @PathVariable UUID id) {
        AuthenticatedModelAndView modelAndView = new AuthenticatedModelAndView("dashboard/exercises/generators/show", userRepository.getByOAuth2(oAuth2User));
        modelAndView.addObject("generator", exerciseGeneratorRepository.findById(id).orElseThrow());
        modelAndView.addObject("generatedExercises", exerciseRepository.findAllByGeneratorIdOrderByName(id));
        return modelAndView;
    }
}
